[user]
  name = Fernando Paredes
  email = nano@fdp.io

[push]
  default = upstream

[color]
  ui = auto

[color "diffr"]
  oldNormal = red bold
  oldHighlight = red bold 52
  newNormal = green bold
  newHighlight = green bold 22

[color "diff"]
  commit = green
  meta = yellow
  frag = cyan
  old = red
  new = green
  whitespace = red reverse
  newMoved = cyan
  oldMoved = blue

[color "status"]
  untracked = cyan

[alias]
  a = add
  aa = add --all
  ai = add --interactive
  amend = commit --amend
  ap = add --patch

  biggest = "!git rev-list --objects --all | grep `git verify-pack -v .git/objects/pack/*.idx | sort -k 3 -n | tail -1 | awk '{ print $1 }'`"
  branch = branch -vv
  branches = branch -a
  browse = "!hub browse"

  ca = commit --amend
  ci = commit --verbose
  cl = clone --recursive
  co = checkout
  checkout-pr = !sh -c 'git fetch origin pull/$1/head:pr-$1 && git checkout pr-$1' -

  # Determines the branch we're on
  current = rev-parse --abbrev-ref HEAD

  dc = diff --cached

  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  # Displays a diff from the start of history
  diff-from-start = "!git diff --color=always --stat $(git hash-object -t tree /dev/null)"

  f = files

  # Add fallback logic
  fallback-to-base = "!if [ -n \"$1\" ]; then echo \"$1\"; else echo master; fi #"

  filelog = log -u
  files = "!git ls-files | grep -i"

  # Remove tracked files
  forget = rm -r --cached

  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"

  fza = "!git ls-files -m -o --exclude-standard | fzf --print0 -m | xargs -0 -t -o git add"
  issues = !hub browse -- issues
  laf = fsck --lost-found
  lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  ls-ignored = ls-files --exclude-standard --ignored --others
  m = checkout master
  merge-branch = !git checkout master && git merge @{-1} --ff-only
  pf = push --force-with-lease
  pn = push --set-upstream origin master
  pr = !hub pull-request
  purge = !git branch -d $(git branch --merged master | grep -v -e '*' -e 'master')

  # Display a diff of changes since branch-off point
  review = "!git diff $(git review-base \"$1\") #"

  # Determines the branch that started the current branch
  review-base = "!git merge-base `git current` $(git fallback-to-base \"$1\") #"

  rebase-origin = !git fetch origin && git rebase origin/master
  releases = log --decorate --oneline --simplify-by-decoration --all
  reset-hard = reset --hard HEAD
  st = status --short --branch
  tagage = !sh -c 'git for-each-ref --sort=taggerdate refs/tags --format=\"%(refname:short)\"'
  timespan = "!f() { one=$(git log -n 1 --format=%ai $1); two=$(git log -n 1 --format=%ai ${2:-HEAD}); ddiff -f ${3:-%mm%dd} \"$one\" \"$two\"; }; f"
  undo = "!f() { \\\n    git reset --hard $(git rev-parse --abbrev-ref HEAD)@{${1-1}}; \\\n}; f"
  unpushed = log --oneline HEAD..."@{u}"
  wip = rebase -i "@{u}"

[core]
  attributesfile = ~/.gitattributes
  excludesfile = ~/.gitignore
  editor = nvim
  log = delta
  show = delta
  pager = delta
  whitespace = fix
  untrackedCache = true
	commitGraph = true

[credential]
  helper = osxkeychain

[rebase]
  autostash = true
  autosquash = true
  stat = true

[stash]
  showPatch = true

[submodule]
  fetchJobs = 0

[diff]
  colorMoved = default
  algorithm = patience
  # Detect copies and renames
  renames = copies

[interactive]
  diffFilter = delta --color-only

[pull]
  rebase = true
  twohead = ort

[include]
  path = ~/.gitconfig.local

[rerere]
  enabled = true
  autoupdate = true

[apply]
  whitespace = nowarn

[commit]
  verbose = true

[diff "plist"]
  textconv = plutil -convert xml1 -o -

[diff "provision"]
  textconv = openssl smime -inform der -verify -in

[diff "bin"]
  # Use `hexdump` to diff binary files
  textconv = hexdump -v -C

[filter "lfs"]
  smudge = git-lfs smudge -- %f
  required = true
  clean = git-lfs clean -- %f

[gc]
  writeCommitGraph = true

[fetch]
  prune = true
[init]
	defaultBranch = main

[delta]
  side-by-side = true
  features = decorations

[delta "decorations"]
    commit-decoration-style = bold yellow box ul
    file-style = bold yellow ul
    file-decoration-style = none
    hunk-header-decoration-style = yellow box
[checkout]
	workers = 0
[diff "lockb"]
	textconv = bun
	binary = true
